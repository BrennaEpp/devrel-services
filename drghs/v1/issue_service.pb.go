// Code generated by protoc-gen-go. DO NOT EDIT.
// source: issue_service.proto

package drghs_v1

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Request message for [DevRelGitHubService.ListIssues][].
type ListIssuesRequest struct {
	// Required. The resource name of the repository associated with the
	// [Issues][Issue], in the format `owners/*/repositories/*`.
	Parent string `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	// Optional. Limit the number of [Issues][Issue] to include in the
	// response. Fewer Issues than requested might be returned.
	//
	// The maximum page size is `100`. If unspecified, the page size will be the
	// maximum. Further [Issues][Issue] can subsequently be obtained
	// by including the [ListIssuesResponse.next_page_token][] in a
	// subsequent request.
	PageSize int32 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Optional. To request the first page of results, `page_token` must be empty.
	// To request the next page of results, page_token must be the value of
	// [ListIssuesResponse.next_page_token][] returned by a previous call to
	// [Issueservice.ListIssues][].
	//
	// The page token is valid for only 2 hours.
	PageToken string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	// Optional. Filter expression used to only include resources that match the
	// filter in the response. Filter must be in following the format:
	//
	//     field1=123
	//     field2="Foo bar"
	//     field3 IN (value3, value4)
	//     field4 LIKE "%somestring%"
	//
	// Valid filter fields are: `name`, `repo.name`, `repo.owner`, and `size`.
	//
	Filter string `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`
	// Optional. Specify how the results should be sorted. The fields supported
	// for sorting are `name` and `size`.
	// The default ordering is by `name`. Prefix with `-` to specify
	// descending order, e.g. `-name`.
	OrderBy              string   `protobuf:"bytes,5,opt,name=order_by,json=orderBy,proto3" json:"order_by,omitempty"`
	Comments             bool     `protobuf:"varint,6,opt,name=comments,proto3" json:"comments,omitempty"`
	Reviews              bool     `protobuf:"varint,7,opt,name=reviews,proto3" json:"reviews,omitempty"`
	PullRequest          bool     `protobuf:"varint,8,opt,name=pull_request,json=pullRequest,proto3" json:"pull_request,omitempty"` // Deprecated: Do not use.
	Closed               bool     `protobuf:"varint,9,opt,name=closed,proto3" json:"closed,omitempty"`                              // Deprecated: Do not use.
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListIssuesRequest) Reset()         { *m = ListIssuesRequest{} }
func (m *ListIssuesRequest) String() string { return proto.CompactTextString(m) }
func (*ListIssuesRequest) ProtoMessage()    {}
func (*ListIssuesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4667488ad260932, []int{0}
}

func (m *ListIssuesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListIssuesRequest.Unmarshal(m, b)
}
func (m *ListIssuesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListIssuesRequest.Marshal(b, m, deterministic)
}
func (m *ListIssuesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListIssuesRequest.Merge(m, src)
}
func (m *ListIssuesRequest) XXX_Size() int {
	return xxx_messageInfo_ListIssuesRequest.Size(m)
}
func (m *ListIssuesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListIssuesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListIssuesRequest proto.InternalMessageInfo

func (m *ListIssuesRequest) GetParent() string {
	if m != nil {
		return m.Parent
	}
	return ""
}

func (m *ListIssuesRequest) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *ListIssuesRequest) GetPageToken() string {
	if m != nil {
		return m.PageToken
	}
	return ""
}

func (m *ListIssuesRequest) GetFilter() string {
	if m != nil {
		return m.Filter
	}
	return ""
}

func (m *ListIssuesRequest) GetOrderBy() string {
	if m != nil {
		return m.OrderBy
	}
	return ""
}

func (m *ListIssuesRequest) GetComments() bool {
	if m != nil {
		return m.Comments
	}
	return false
}

func (m *ListIssuesRequest) GetReviews() bool {
	if m != nil {
		return m.Reviews
	}
	return false
}

// Deprecated: Do not use.
func (m *ListIssuesRequest) GetPullRequest() bool {
	if m != nil {
		return m.PullRequest
	}
	return false
}

// Deprecated: Do not use.
func (m *ListIssuesRequest) GetClosed() bool {
	if m != nil {
		return m.Closed
	}
	return false
}

// Response message for [DevRelGitHubService.ListIssues][].
type ListIssuesResponse struct {
	// The list of [Issues][Issue].
	Issues []*Issue `protobuf:"bytes,1,rep,name=issues,proto3" json:"issues,omitempty"`
	// A token to retrieve the next page of results, or empty if there are no
	// more results in the list. Pass this value in
	// [ListIssuesRequest.page_token][] to retrieve the next page of
	// results.
	NextPageToken string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3" json:"next_page_token,omitempty"`
	// The total number of [Issues][Issue] that matched the query.
	Total                int32    `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListIssuesResponse) Reset()         { *m = ListIssuesResponse{} }
func (m *ListIssuesResponse) String() string { return proto.CompactTextString(m) }
func (*ListIssuesResponse) ProtoMessage()    {}
func (*ListIssuesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4667488ad260932, []int{1}
}

func (m *ListIssuesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListIssuesResponse.Unmarshal(m, b)
}
func (m *ListIssuesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListIssuesResponse.Marshal(b, m, deterministic)
}
func (m *ListIssuesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListIssuesResponse.Merge(m, src)
}
func (m *ListIssuesResponse) XXX_Size() int {
	return xxx_messageInfo_ListIssuesResponse.Size(m)
}
func (m *ListIssuesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListIssuesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListIssuesResponse proto.InternalMessageInfo

func (m *ListIssuesResponse) GetIssues() []*Issue {
	if m != nil {
		return m.Issues
	}
	return nil
}

func (m *ListIssuesResponse) GetNextPageToken() string {
	if m != nil {
		return m.NextPageToken
	}
	return ""
}

func (m *ListIssuesResponse) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

// Response message for [DevRelGitHubService.GetIssue][].
type GetIssueRequest struct {
	// Required. The fully qualified name of the [Issue][], in the format
	// `owners/*/repositories/*/issues/*`.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Specifies if to include the [Issue]'s Comments
	Comments bool `protobuf:"varint,2,opt,name=comments,proto3" json:"comments,omitempty"`
	// Specifies if to inlcude the [Issue]'s Reviews
	Reviews              bool     `protobuf:"varint,3,opt,name=reviews,proto3" json:"reviews,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetIssueRequest) Reset()         { *m = GetIssueRequest{} }
func (m *GetIssueRequest) String() string { return proto.CompactTextString(m) }
func (*GetIssueRequest) ProtoMessage()    {}
func (*GetIssueRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4667488ad260932, []int{2}
}

func (m *GetIssueRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetIssueRequest.Unmarshal(m, b)
}
func (m *GetIssueRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetIssueRequest.Marshal(b, m, deterministic)
}
func (m *GetIssueRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetIssueRequest.Merge(m, src)
}
func (m *GetIssueRequest) XXX_Size() int {
	return xxx_messageInfo_GetIssueRequest.Size(m)
}
func (m *GetIssueRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetIssueRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetIssueRequest proto.InternalMessageInfo

func (m *GetIssueRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GetIssueRequest) GetComments() bool {
	if m != nil {
		return m.Comments
	}
	return false
}

func (m *GetIssueRequest) GetReviews() bool {
	if m != nil {
		return m.Reviews
	}
	return false
}

func init() {
	proto.RegisterType((*ListIssuesRequest)(nil), "drghs.v1.ListIssuesRequest")
	proto.RegisterType((*ListIssuesResponse)(nil), "drghs.v1.ListIssuesResponse")
	proto.RegisterType((*GetIssueRequest)(nil), "drghs.v1.GetIssueRequest")
}

func init() { proto.RegisterFile("issue_service.proto", fileDescriptor_d4667488ad260932) }

var fileDescriptor_d4667488ad260932 = []byte{
	// 501 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x53, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0x95, 0x9d, 0xc6, 0x71, 0xa6, 0x45, 0x81, 0x05, 0xc1, 0xd6, 0x69, 0xa5, 0x60, 0x44, 0xb1,
	0x72, 0xb0, 0xd5, 0x72, 0xe6, 0xd2, 0x0b, 0x42, 0xe2, 0x80, 0x5c, 0x6e, 0x3d, 0x58, 0x6e, 0x32,
	0x84, 0x15, 0xce, 0xae, 0xd9, 0xdd, 0xa4, 0xb4, 0x55, 0x2f, 0xdc, 0x38, 0xf7, 0xa7, 0xf1, 0x17,
	0xe0, 0x7f, 0xa0, 0x5d, 0xdb, 0xf9, 0xb0, 0x4a, 0x6f, 0x99, 0x79, 0x93, 0xf7, 0x76, 0xde, 0x1b,
	0xc3, 0x53, 0xa6, 0xd4, 0x02, 0x33, 0x85, 0x72, 0xc9, 0x26, 0x18, 0x97, 0x52, 0x68, 0x41, 0xfc,
	0xa9, 0x9c, 0x7d, 0x55, 0xf1, 0xf2, 0x38, 0x38, 0x98, 0x09, 0x31, 0x2b, 0x30, 0xc9, 0x4b, 0x96,
	0xe4, 0x9c, 0x0b, 0x9d, 0x6b, 0x26, 0xb8, 0xaa, 0xe6, 0x82, 0x81, 0x44, 0x25, 0x16, 0x72, 0x82,
	0x4d, 0xe3, 0x45, 0xcd, 0x93, 0xb5, 0x80, 0xf0, 0xce, 0x85, 0x27, 0x1f, 0x99, 0xd2, 0x1f, 0x8c,
	0x9a, 0x4a, 0xf1, 0xfb, 0x02, 0x95, 0x26, 0xcf, 0xc1, 0x2b, 0x73, 0x89, 0x5c, 0x53, 0x67, 0xe4,
	0x44, 0xfd, 0xb4, 0xae, 0xc8, 0x10, 0xfa, 0x65, 0x3e, 0xc3, 0x4c, 0xb1, 0x6b, 0xa4, 0xee, 0xc8,
	0x89, 0xba, 0xa9, 0x6f, 0x1a, 0x67, 0xec, 0x1a, 0xc9, 0x21, 0x80, 0x05, 0xb5, 0xf8, 0x86, 0x9c,
	0x76, 0xec, 0x1f, 0xed, 0xf8, 0x67, 0xd3, 0x30, 0x9c, 0x5f, 0x58, 0xa1, 0x51, 0xd2, 0x9d, 0x8a,
	0xb3, 0xaa, 0xc8, 0x3e, 0xf8, 0x42, 0x4e, 0x51, 0x66, 0x17, 0x57, 0xb4, 0x6b, 0x91, 0x9e, 0xad,
	0x4f, 0xaf, 0x48, 0x00, 0xfe, 0x44, 0xcc, 0xe7, 0xc8, 0xb5, 0xa2, 0xde, 0xc8, 0x89, 0xfc, 0x74,
	0x55, 0x13, 0x0a, 0x3d, 0x89, 0x4b, 0x86, 0x97, 0x8a, 0xf6, 0x2c, 0xd4, 0x94, 0xe4, 0x35, 0xec,
	0x95, 0x8b, 0xa2, 0xc8, 0x64, 0xb5, 0x0c, 0xf5, 0x0d, 0x7c, 0xea, 0x52, 0x27, 0xdd, 0x35, 0xfd,
	0x66, 0xc7, 0x00, 0xbc, 0x49, 0x21, 0x14, 0x4e, 0x69, 0x7f, 0x35, 0x50, 0x77, 0xc2, 0x1b, 0x20,
	0x9b, 0xa6, 0xa8, 0x52, 0x70, 0x85, 0xe4, 0x0d, 0x78, 0x36, 0x14, 0x45, 0x9d, 0x51, 0x27, 0xda,
	0x3d, 0x19, 0xc4, 0x4d, 0x1c, 0xb1, 0x9d, 0x4c, 0x6b, 0x98, 0x1c, 0xc1, 0x80, 0xe3, 0x0f, 0x9d,
	0x6d, 0xd8, 0xe1, 0xda, 0xcd, 0x1e, 0x99, 0xf6, 0xa7, 0x95, 0x25, 0xcf, 0xa0, 0xab, 0x85, 0xce,
	0x0b, 0x6b, 0x56, 0x37, 0xad, 0x8a, 0xf0, 0x1c, 0x06, 0xef, 0xb1, 0xd2, 0x6e, 0xde, 0x4a, 0x60,
	0x87, 0xe7, 0x73, 0xac, 0xd3, 0xb0, 0xbf, 0xb7, 0xcc, 0x71, 0xff, 0x6f, 0x4e, 0x67, 0xcb, 0x9c,
	0x93, 0xbf, 0x2e, 0xec, 0x59, 0xea, 0xb3, 0xea, 0x20, 0xc8, 0x2f, 0x07, 0x1e, 0x9b, 0x5d, 0x53,
	0x2c, 0x85, 0x62, 0x5a, 0x48, 0x86, 0x8a, 0xbc, 0x5c, 0x6f, 0xd6, 0xc6, 0xea, 0x27, 0x05, 0xe1,
	0x43, 0x23, 0x95, 0x61, 0x61, 0xfc, 0xf3, 0xf7, 0x9f, 0x3b, 0x37, 0x22, 0x47, 0xf6, 0x4c, 0x97,
	0xc7, 0xc9, 0x4d, 0x75, 0x47, 0xef, 0xc4, 0x25, 0x47, 0xa9, 0x92, 0xf1, 0x6d, 0x22, 0x37, 0x65,
	0x0b, 0x80, 0xb5, 0xed, 0x64, 0xb8, 0xad, 0xb0, 0x75, 0xa1, 0xc1, 0xc1, 0xfd, 0x60, 0x2d, 0xfc,
	0xca, 0x0a, 0x1f, 0x92, 0x61, 0x5b, 0x78, 0x6c, 0x34, 0xeb, 0x94, 0xce, 0xc1, 0x6f, 0x7c, 0x26,
	0xfb, 0x6b, 0xba, 0x96, 0xf7, 0x41, 0x3b, 0xe5, 0x7b, 0xc8, 0x4d, 0x1e, 0x86, 0xba, 0x66, 0x4e,
	0xc6, 0xb7, 0x17, 0x9e, 0xfd, 0xbc, 0xde, 0xfe, 0x0b, 0x00, 0x00, 0xff, 0xff, 0xdf, 0x15, 0x91,
	0x88, 0xc7, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// IssueServiceClient is the client API for IssueService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IssueServiceClient interface {
	// Lists [Repositories][Repository].
	ListRepositories(ctx context.Context, in *ListRepositoriesRequest, opts ...grpc.CallOption) (*ListRepositoriesResponse, error)
	// Lists [Issues][Issue].
	ListIssues(ctx context.Context, in *ListIssuesRequest, opts ...grpc.CallOption) (*ListIssuesResponse, error)
	// Gets a [Issue][].
	GetIssue(ctx context.Context, in *GetIssueRequest, opts ...grpc.CallOption) (*Issue, error)
}

type issueServiceClient struct {
	cc *grpc.ClientConn
}

func NewIssueServiceClient(cc *grpc.ClientConn) IssueServiceClient {
	return &issueServiceClient{cc}
}

func (c *issueServiceClient) ListRepositories(ctx context.Context, in *ListRepositoriesRequest, opts ...grpc.CallOption) (*ListRepositoriesResponse, error) {
	out := new(ListRepositoriesResponse)
	err := c.cc.Invoke(ctx, "/drghs.v1.IssueService/ListRepositories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issueServiceClient) ListIssues(ctx context.Context, in *ListIssuesRequest, opts ...grpc.CallOption) (*ListIssuesResponse, error) {
	out := new(ListIssuesResponse)
	err := c.cc.Invoke(ctx, "/drghs.v1.IssueService/ListIssues", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *issueServiceClient) GetIssue(ctx context.Context, in *GetIssueRequest, opts ...grpc.CallOption) (*Issue, error) {
	out := new(Issue)
	err := c.cc.Invoke(ctx, "/drghs.v1.IssueService/GetIssue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IssueServiceServer is the server API for IssueService service.
type IssueServiceServer interface {
	// Lists [Repositories][Repository].
	ListRepositories(context.Context, *ListRepositoriesRequest) (*ListRepositoriesResponse, error)
	// Lists [Issues][Issue].
	ListIssues(context.Context, *ListIssuesRequest) (*ListIssuesResponse, error)
	// Gets a [Issue][].
	GetIssue(context.Context, *GetIssueRequest) (*Issue, error)
}

// UnimplementedIssueServiceServer can be embedded to have forward compatible implementations.
type UnimplementedIssueServiceServer struct {
}

func (*UnimplementedIssueServiceServer) ListRepositories(ctx context.Context, req *ListRepositoriesRequest) (*ListRepositoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRepositories not implemented")
}
func (*UnimplementedIssueServiceServer) ListIssues(ctx context.Context, req *ListIssuesRequest) (*ListIssuesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIssues not implemented")
}
func (*UnimplementedIssueServiceServer) GetIssue(ctx context.Context, req *GetIssueRequest) (*Issue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIssue not implemented")
}

func RegisterIssueServiceServer(s *grpc.Server, srv IssueServiceServer) {
	s.RegisterService(&_IssueService_serviceDesc, srv)
}

func _IssueService_ListRepositories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRepositoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssueServiceServer).ListRepositories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drghs.v1.IssueService/ListRepositories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssueServiceServer).ListRepositories(ctx, req.(*ListRepositoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IssueService_ListIssues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListIssuesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssueServiceServer).ListIssues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drghs.v1.IssueService/ListIssues",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssueServiceServer).ListIssues(ctx, req.(*ListIssuesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IssueService_GetIssue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIssueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IssueServiceServer).GetIssue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/drghs.v1.IssueService/GetIssue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IssueServiceServer).GetIssue(ctx, req.(*GetIssueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _IssueService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "drghs.v1.IssueService",
	HandlerType: (*IssueServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListRepositories",
			Handler:    _IssueService_ListRepositories_Handler,
		},
		{
			MethodName: "ListIssues",
			Handler:    _IssueService_ListIssues_Handler,
		},
		{
			MethodName: "GetIssue",
			Handler:    _IssueService_GetIssue_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "issue_service.proto",
}
