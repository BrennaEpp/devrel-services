
# Copyright 2019 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

swagger: "2.0"
info:
  description: "Google Cloud Endpoints for DevRel GitHub Services."
  title: "DevRel GitHub Services API (TYPE)"
  version: "1.0.0"
host: "drghs.endpoints.PROJECT_ID.cloud.goog"
x-google-endpoints:
- name: "drghs.endpoints.PROJECT_ID.cloud.goog"
  target: "IP_ADDR"
consumes:
- "application/json"
produces:
- "application/json"
schemes:
# Uncomment the next line if you configure SSL for this API.
#- "https"
- "http"
paths:
  "/update":
    post:
      description: "Instruct the corpus to update the list of repositories."
      operationId: "update"
      produces:
      - "application/json"
      responses:
        200:
          description: "Update"
      security:
      - api_key: []
  "/api/v0/issue":
    post:
      description: "Get a particular issue."
      operationId: "issueGet"
      produces:
      - "application/json"
      responses:
        200:
          description: "Issue"
          schema:
            $ref: "models/response.yaml#/Response"
      parameters:
      - description: "Issue Request"
        in: body
        name: repo
        required: true
        schema:
          $ref: "models/get_issue_request.yaml#/GetIssueRequest"
      security:
      - api_key: []
  "/api/v0/issues":
    post:
      description: "Gets all issues for the given repository"
      operationId: "issueList"
      produces:
      - "application/json"
      responses:
        200:
          description: "Issues"
          schema:
            $ref: "models/response.yaml#/Response"
      parameters:
      - description: "Issue Request"
        in: body
        name: repo
        required: true
        schema:
          $ref: "models/list_issues_request.yaml#/ListIssuesRequest"
      security:
      - api_key: []
  "/api/v0/sloViolations":
    post:
      description: "Gets all slo violations for a given repository"
      operationId: "sloViolationsList"
      produces:
      - "application/json"
      responses:
        200:
          description: "SloViolations"
          schema:
            $ref: "models/response.yaml#/Response"
      parameters:
      - description: "SloViolation Request"
        in: body
        name: repo
        required: true
        schema:
          $ref: "models/request.yaml#/Request"
      security:
      - api_key: []
  "/api/v0/approvedPRs":
    get:
      description: "Gets all Pull Requests that are approved"
      operationId: "approvedPRList"
      produces:
      - "application/json"
      responses:
        200:
          description: "ApprovedPRs"
          schema:
            $ref: "models/response.yaml#/Response"
      security:
      - api_key: []
## Api V1
  "/api/v1/approvedPRs":
    get:
      description: "Gets all Pull Requests that are approved"
      operationId: "approvedPRListV1"
      produces:
      - "application/json"
      responses:
        200:
          description: "ApprovedPRs"
          schema:
            $ref: "models/response.yaml#/Response"
      security:
      - api_key: []
  "/api/v1/sloViolations":
    post:
      description: "Gets all slo violations for a given repository"
      operationId: "sloViolationsListV1"
      produces:
      - "application/json"
      responses:
        200:
          description: "SloViolations"
          schema:
            $ref: "models/response.yaml#/Response"
      parameters:
      - description: "SloViolation Request"
        in: body
        name: repo
        required: true
        schema:
          $ref: "models/request.yaml#/Request"
      security:
      - api_key: []
  "/api/v1/{owner}/{repository}/issues":
    get:
      description: "Gets all Issues for a Repository"
      operationId: "getIssuesV1"
      parameters:
      - in: path
        required: true
        name: owner
        type: string
      - in: path
        required: true
        name: repository
        type: string
      produces:
      - "application/json"
      responses:
        200:
          description: "Issues"
          schema:
            $ref: "models/response.yaml#/Response"
      security:
      - api_key: []
  "/api/v1/{owner}/{repository}/issues/{id}":
    get:
      description: "Gets all Issues for a Repository"
      operationId: "getIssueByIdV1"
      parameters:
      - in: path
        required: true
        name: owner
        type: string
      - in: path
        required: true
        name: repository
        type: string
      - in: path
        required: true
        name: id
        type: integer
        minimum: 1
      produces:
      - "application/json"
      responses:
        200:
          description: "Issues"
          schema:
            $ref: "models/response.yaml#/Response"
      security:
      - api_key: []

# As strange as this may look, this was the only way to get the
# multi file schema definitions to look. Endpoints seems to _require_
# a non-empty definitions section in order to be deployed
definitions:
  Dummy:
    type: object

# This section requires all requests to any path to require an API key.
securityDefinitions:
  # This section configures basic authentication with an API key.
  api_key:
    type: "apiKey"
    name: "key"
    in: "query"
